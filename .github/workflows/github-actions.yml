# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build

      # create application.properties (보안상의 이유로 actions를 통해 생성)
      - name: make application.properties
        if: contains(github.ref, 'master') # branch가 master일 때
        run: |
          # spring의 resources 경로로 이동
           cd ./src/main/resources 
          
           # application.properties 파일 생성
           touch ./application.properties 
          
           # GitHub-Actions에서 설정한 값을 application.properties 파일에 쓰기
           echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # ECR 로그인 및 DOCKER BUILD(ec2환경에서 실행하려면 build시 platform amd64 지정해줘야함)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: patrickproject
          IMAGE_TAG: 0.1.0
        run: |
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:0.1.0 .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:0.1.0
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:0.1.0"
      # EC2에서 image 가져와서 실행(IAM Role 에서 ec2 접근권한 설정후 인스턴스에 적용 혹은 aws configure로 accesskey, secret key 입력 -> 하고나면 ~/.aws 하위에서 확인가능)
      # aws ecr get-login-password --region ap-northeast-1 -> ~/.docker/config.json 값 확인 가능, 로그인 인증과정 거친후 image pull 할 수 있음.
      ## EC2에 배포
      - name: Deploy
        uses: appleboy/ssh-action@master
        id: deploy
        if: contains(github.ref, 'master')
        with:
          host: ${{ secrets.HOST_EC2 }}
          username: ec2-user
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker pull 483543817526.dkr.ecr.ap-northeast-1.amazonaws.com/patrickproject:0.1.0
            docker run -d -p 8080:8080 --name ecmall 483543817526.dkr.ecr.ap-northeast-1.amazonaws.com/patrickproject:0.1.0
